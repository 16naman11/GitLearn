

### ABOUT GIT AND GITHUB

Git is a system designed for version control. Version control systems are crucial software tools that record and track modifications made to files over time.

#### History of Git

- 1982: First generation of version control systems.
- 1990: Emergence of centralized version control systems.
- 2005: Git was created.

The birth of Git was driven by necessity. In 2002, the Linux kernel project began using BitKeeper, a proprietary distributed version control system. By 2005, a breakdown in the relationship between the Linux community and BitKeeper's developers led to the withdrawal of its free status. This prompted Linus Torvalds and the Linux development community to create Git, drawing on lessons learned from BitKeeper.

#### Types of Version Control Systems

1. Local Version Control Systems: These are the simplest form, featuring a database that logs all file changes under revision control. A common example is RCS, which stores differences between files in a special format on disk, allowing re-creation of any file's state at any given time by applying all patches.

2. Centralized Version Control Systems: These systems have a single server hosting all versioned files, with multiple clients checking out files from this central location. This has been the standard approach to version control for many years.

3. Distributed Version Control Systems: Here, clients don't just check out the latest file snapshot but mirror the entire repository, including its complete history. This ensures that if a server fails, any client repository can restore the server by copying back the data.

#### Git States

Git files can exist in three states: modified, staged, and committed.

- Modified: The file has been altered but not yet saved to the database.
- Staged:The modified file is marked to be included in the next commit.
- Committed: The data is securely stored in your local database.

This results in three main sections in a Git project: the working tree, the staging area, and the Git directory.

#### Basic Git Workflow

1. Modify files in your working tree.
2. Stage changes to be included in the next commit.
3. Commit the changes, permanently storing the snapshot in the Git directory.

#### Setting Username and Email

```sh
git config --global user.name "16naman11"
git config --global user.email namanaco@gmail.com
```

To check the configuration settings:

```sh
git config --list
```

#### Initializing a Repository

```sh
git init
```

This creates a `.git` subdirectory containing all necessary repository files.

#### Tracking Files

- Add all files: `git add .`
- Add a specific file: `git add index.html`
- Commit changes: `git commit -m "first commit"`

#### Cloning a Repository

```sh
git clone <url>
```

#### Checking File Status

```sh
git status
```

- Compare working directory with staging area: `git diff`
- Compare staged changes to last commit: `git diff --staged`

#### Viewing Commit History

```sh
git log
```

If you need to amend a commit:

```sh
git commit --amend
```

#### Branching

- List branches: `git branch`
- Create a new branch: `git branch ui`
- Switch branches: `git checkout ui`

#### Merging Branches

To merge the `master` branch with `ui`:

1. Switch to `master`: `git checkout master`
2. Merge with `ui`: `git merge ui`

#### Resolving Merge Conflicts

When conflicts arise from different changes in the same file across branches, manually resolve and save the desired content before merging again.

#### Pushing to GitHub

```sh
git remote add origin URL
git branch -M main
git push -u origin main
```

#### Pulling Changes

To update your local copy with the latest changes:

- `fetch` retrieves all change history.
- `merge` integrates a specified branch with the current one.
- `pull` combines `fetch` and `merge` to update your current branch.

#### Forking

A fork is a personal copy of a repository, useful for contributing to other projects or starting new ones based on existing projects.

#### Generating Tokens

1. Go to settings.
2. Navigate to developer settings under the public profile.
3. Select personal access tokens, then classic tokens.
4. Generate a new token.

---